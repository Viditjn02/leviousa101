/**
 * Secure Download Configuration for Vercel Blob Storage
 * These URLs are generated by the upload script and point to encrypted files
 * in Vercel's global CDN with AES-256 encryption
 */

export interface SecureDownloadConfig {
  url: string;
  platform: string;
  architecture: string;
  description: string;
  security: {
    encrypted: boolean;
    cdnDistribution: boolean;
    uniqueUrl: boolean;
  };
}

// These URLs will be populated after running the upload script
// Each URL is unique, unguessable, and globally distributed for security and performance
export const SECURE_DOWNLOAD_URLS: Record<string, SecureDownloadConfig> = {
  'macos-arm64': {
    url: process.env.BLOB_URL_MACOS_ARM64 || 'https://www.leviousa.com/releases/Leviousa-1.0.0-arm64.dmg',
    platform: 'macos',
    architecture: 'arm64',
    description: 'macOS installer for Apple Silicon (M1/M2/M3)',
    security: {
      encrypted: true,
      cdnDistribution: true,
      uniqueUrl: true
    }
  },
  
  'macos-intel': {
    url: process.env.BLOB_URL_MACOS_INTEL || 'https://www.leviousa.com/releases/Leviousa-1.0.0-intel.dmg',
    platform: 'macos', 
    architecture: 'intel',
    description: 'macOS installer for Intel processors',
    security: {
      encrypted: true,
      cdnDistribution: true,
      uniqueUrl: true
    }
  },
  
  'windows-x64': {
    url: process.env.BLOB_URL_WINDOWS_X64 || 'https://www.leviousa.com/releases/Leviousa-Setup-1.0.0.exe',
    platform: 'windows',
    architecture: 'x64', 
    description: 'Windows installer (64-bit)',
    security: {
      encrypted: true,
      cdnDistribution: true,
      uniqueUrl: true
    }
  }
};

/**
 * Get secure download URL for a specific platform and architecture
 */
export function getSecureDownloadUrl(platform: string, architecture: string = 'universal'): SecureDownloadConfig | null {
  const key = `${platform.toLowerCase()}-${architecture.toLowerCase()}`;
  return SECURE_DOWNLOAD_URLS[key] || null;
}

/**
 * Get all available download configurations
 */
export function getAllSecureDownloads(): SecureDownloadConfig[] {
  return Object.values(SECURE_DOWNLOAD_URLS);
}

/**
 * Validate if a download configuration is properly secured
 */
export function isSecureDownload(config: SecureDownloadConfig): boolean {
  return config.security.encrypted && 
         config.security.cdnDistribution && 
         config.security.uniqueUrl &&
         config.url.startsWith('https://');
}
